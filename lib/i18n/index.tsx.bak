"use client"

import { createContext, useContext, useState, useEffect, type ReactNode } from "react"
import { ja } from "./locales/ja"
import { en } from "./locales/en"
import { fr } from "./locales/fr"
import i18next from 'i18next'
import { initReactI18next, useTranslation } from 'react-i18next'
import LanguageDetector from 'i18next-browser-languagedetector'

// Importing JSON translations (for react-i18next)
import jaJSON from './locales/ja.json'
import enJSON from './locales/en.json'
import frJSON from './locales/fr.json'

export type Locale = "ja" | "en" | "fr"
export type Translations = typeof ja

const locales: Record<Locale, Translations> = {
  ja,
  en,
  fr,
}

// Initialize i18next
if (!i18next.isInitialized) {
  i18next
    .use(LanguageDetector)
    .use(initReactI18next)
    .init({
      resources: {
        en: enJSON,
        fr: frJSON,
        ja: jaJSON
      },
      fallbackLng: 'en',
      debug: process.env.NODE_ENV === 'development',
      defaultNS: 'common',
      interpolation: {
        escapeValue: false,
      },
      detection: {
        order: ['localStorage', 'navigator'],
        caches: ['localStorage'],
      },
    });
}

interface I18nContextType {
  locale: Locale
  t: Translations
  t2: (key: string, options?: any) => string // react-i18next translation function
  changeLocale: (locale: Locale) => void
}

const I18nContext = createContext<I18nContextType | undefined>(undefined)

const LOCAL_STORAGE_KEY = "openfisca-editor-locale"

export function I18nProvider({ children }: { children: ReactNode }) {
  const { t: t2, i18n } = useTranslation()
  const [locale, setLocale] = useState<Locale>("ja")
  const [translations, setTranslations] = useState<Translations>(ja)

  useEffect(() => {
    // ブラウザのローカルストレージから言語設定を読み込む
    const savedLocale =
      typeof window !== "undefined" ? (localStorage.getItem(LOCAL_STORAGE_KEY) as Locale | null) : null

    if (savedLocale && locales[savedLocale]) {
      setLocale(savedLocale)
      setTranslations(locales[savedLocale])
      i18n.changeLanguage(savedLocale)
    }
  }, [i18n])

  const changeLocale = (newLocale: Locale) => {
    setLocale(newLocale)
    setTranslations(locales[newLocale])
    i18n.changeLanguage(newLocale)

    // ブラウザのローカルストレージに言語設定を保存
    if (typeof window !== "undefined") {
      localStorage.setItem(LOCAL_STORAGE_KEY, newLocale)
    }
  }

  return (
    <I18nContext.Provider value={{ locale, t: translations, t2, changeLocale }}>
      {children}
    </I18nContext.Provider>
  )
}

export function useI18n() {
  const context = useContext(I18nContext)
  if (context === undefined) {
    throw new Error("useI18n must be used within an I18nProvider")
  }
  return context
}

// サポートされている言語の一覧
export const supportedLanguages = [
  { code: 'en', name: 'English' },
  { code: 'fr', name: 'Français' },
  { code: 'ja', name: '日本語' }
];
